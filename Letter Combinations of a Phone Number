Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.


 

Example 1:

Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]
Example 2:

Input: digits = ""
Output: []
Example 3:

Input: digits = "2"
Output: ["a","b","c"]
 

Constraints:

0 <= digits.length <= 4
digits[i] is a digit in the range ['2', '9'].

class Solution {
public:
        // we can have digits from 2 - 9 digits
        // we would have an array of either 2-9 as per set for each digit
        // combination. 

        // if digits size is 2, then we represent 2 output per digit
        // if 1 then ignore -1.
        // set each number or map each number to three letters
        // assuming all will be represented with that and not going anywhere
        // less than the amount of digits shown, we wont display 2 letters if
        // we have 3 characters

unordered_map<char, string> mp;
    void dfs(int i,string digits,vector<string>& ans , string temp){
        if(i > digits.size()-1 ) ans.push_back(temp);
        string temp2 = mp[digits[i]];
        for (int j = 0;j<temp2.size();j++) {
            dfs(i+1,digits,ans,temp+temp2[j]);
        }
        return ;
    }
    vector<string> letterCombinations(string digits) {
        mp['2']="abc";
        mp['3']="def";
        mp['4']="ghi";
        mp['5']="jkl";
        mp['6']="mno";
        mp['7']="pqrs";
        mp['8']="tuv";
        mp['9']="wxyz";
        vector<string> ans;
        dfs(0,digits,ans,"");
        return ans;
    }
};
