// PROMPT
Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:

0 <= a, b, c, d < n
a, b, c, and d are distinct.
nums[a] + nums[b] + nums[c] + nums[d] == target
You may return the answer in any order.
 
Example 1:

Input: nums = [1,0,-1,0,-2,2], target = 0
Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]
Example 2:

Input: nums = [2,2,2,2,2], target = 8
Output: [[2,2,2,2]]
 

Constraints:

1 <= nums.length <= 200
-109 <= nums[i] <= 109
-109 <= target <= 109


// ANSWER
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        // n is nums size
        int n = nums.size();
        // vector of vector is holding the answers
        vector<vector<int>> ans;
        // set the nums from least to greatest
        sort(nums.begin(),nums.end());
        // the for loop is focused on having a simple i less than n
        for(int i = 0;i<n;i++){
            // i greater than 0 and nums of condition i is equal to nums
            // i - 1 then we continue
            if(i>0 && nums[i] == nums[i-1]){
                continue;
            }
            // j is i + 1 and j less than n, we condition to j++;
            for(int j = i+1;j<n;j++){
                // if j is not i+1 and j is equal to j-1
                // 3 = 3
                if(j != (i+1) && nums[j] == nums[j-1]){
                    // skip to next iteration because they are equal
                    continue;
                }
                // k set to j + 1
                int k = j+1;
                // l set to n - 1
                int l = n-1;

                // k is less than l
                while(k<l){
                    // we are getting a sum to be set to the nums i
                    long long sum = nums[i];
                    //  sum will be added with j
                    sum += nums[j];
                    // sum added with k
                    sum += nums[k];
                    // sum added  with l
                    sum += nums[l];
                    if(sum == target){
                        vector<int> temp = {nums[i],nums[j],nums[k],nums[l]};
                        ans.push_back(temp);
                        // increment the k
                        k++;
                        // decrement the l
                        l--;
                        while(k<l && nums[k] == nums[k-1]){
                            k++;
                        }
                        while(k<l && nums[l] == nums[l+1]){
                            l--;
                        }
                    }
                    else if(sum < target){
                        k++;
                    }
                    else{
                        l--;
                    }
                }
            }
        }
        return ans;
    }
};
