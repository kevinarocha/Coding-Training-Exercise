Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target.

Return the sum of the three integers.

You may assume that each input would have exactly one solution.
 
Example 1:

Input: nums = [-1,2,1,-4], target = 1
Output: 2
Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).
Example 2:

Input: nums = [0,0,0], target = 1
Output: 0
Explanation: The sum that is closest to the target is 0. (0 + 0 + 0 = 0).
 

Constraints:

3 <= nums.length <= 500
-1000 <= nums[i] <= 1000
-104 <= target <= 104


Answer:
class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
        // Sorting the array from least to greatest
        sort(nums.begin(),nums.end());
        // Getting first element, second element, and third element added
        // together into the previous integer value
        int prev=nums[0]+nums[1]+nums[2];

        // iterating through the array container
        for(int i=0;i<nums.size()-1;i++){
            // j is set to i and an additional 1
            int j=i+1;
            // k is set to the nums size - 1 for elemental purposes
            int k=nums.size()-1;
            // j is less than k
            while(j<k){
                //sum is set to the nums first element, j is the
                // second element
                // k is currently the last element in the array
                int sum=nums[i]+nums[j]+nums[k];
                // absoulte value to prevent getting a negative number,
                // all we care about is the difference

                // checking if the difference of the sum
                // is less than the difference of prev (previous)

                if(abs(sum-target)<abs(prev-target))
                // if sum is less than prev,
                // that means that sum is closer to the target than
                // prev, we must set prev to the sum
                prev=sum;
                
                // if the sum is less than target
                if(sum<target)
                // set j increment, since it's least to greatest
                j++;
                else
                // if not, we decrement the k, since the numbers are least 
                // to greatest
                k--;
            }
        }
        return prev;
    }
};
