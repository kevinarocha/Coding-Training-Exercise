Given a string containing just the characters '(' and ')', return the length of the longest valid (well-formed) parentheses 
substring
.

 

Example 1:

Input: s = "(()"
Output: 2
Explanation: The longest valid parentheses substring is "()".
Example 2:

Input: s = ")()())"
Output: 4
Explanation: The longest valid parentheses substring is "()()".
Example 3:

Input: s = ""
Output: 0
 

Constraints:

0 <= s.length <= 3 * 104
s[i] is '(', or ')'.

// SOLUTION
class Solution {
public:
    int longestValidParentheses(string s) {
        // we go left to right, if we find a paranthesis
        // we will check the form, if it starts as ')' we will ignore it
        // if the parenthesis is '(' then we will read the next one to be ) if it's
        // true, then we increment as a valid parenthesis,
        // we will keep going and check the next parenthesis and keep going
        // once we hit an invalid state. Either (( or ) then we have to return
        // the longest parenthesis from the algorithm. 

        int lastInvalid = -1;
        int stack = 0;
        int ans = 0;

        for(int i = 0; i < s.size(); i += 1) {
            if (s[i] == '(') {
                stack += 1;
            } else {
                if (stack == 0) {
                    lastInvalid = i;
                } else {
                    stack -= 1;
                    if (stack == 0) {
                        ans = max(ans, i - lastInvalid);
                    }
                }
            }
        }
    
        stack = 0;
        lastInvalid = s.size();
        for(int i = s.size() - 1; i >= 0; i -= 1) {
            if (s[i] == ')') {
                stack += 1;
            } else {
                if (stack == 0) {
                    lastInvalid = i;
                } else {
                    stack -= 1;
                    if (stack == 0) {
                        ans = max(ans, lastInvalid - i);
                    }
                }
            }
        }

        return ans;
    }
};



